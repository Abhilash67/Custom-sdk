import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { AuthProvider } from './AuthProvider';

// Create context
const AuthContext = createContext(null);

/**
 * Authentication context provider component
 * @param {Object} props - Component props
 * @param {React.ReactNode} props.children - Child components
 * @param {string} [props.providerType='auth0'] - Authentication provider type
 * @param {Object} props.providerConfig - Provider-specific configuration
 * @param {Function} [props.onLogin] - Login success callback
 * @param {Function} [props.onLogout] - Logout success callback
 * @param {Function} [props.onError] - Error callback
 * @returns {React.ReactElement} Provider component
 */
export const AuthContextProvider = ({ 
  children, 
  providerType = 'auth0',
  providerConfig = {},
  onLogin,
  onLogout,
  onError
}) => {
  const [authProvider, setAuthProvider] = useState(null);
  const [user, setUser] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    let isMounted = true;
    const initAuth = async () => {
      try {
        setIsLoading(true);
        setError(null);
        
        const provider = new AuthProvider({
          providerType,
          providerConfig
        });
        
        provider.on('initialized', (data) => {
          if (!isMounted) return;
          setIsAuthenticated(data.authenticated);
          if (data.user) {
            setUser(data.user);
          }
          setIsLoading(false);
        });
        
        provider.on('authenticated', (data) => {
          if (!isMounted) return;
          setIsAuthenticated(true);
          setUser(data.user);
          if (onLogin) {
            onLogin(data.user);
          }
        });
        
        provider.on('logout', () => {
          if (!isMounted) return;
          setIsAuthenticated(false);
          setUser(null);
          if (onLogout) {
            onLogout();
          }
        });
        
        provider.on('session_expired', () => {
          if (!isMounted) return;
          setIsAuthenticated(false);
          setUser(null);
        });
        
        provider.on('error', (data) => {
          if (!isMounted) return;
          setError(data.error);
          if (onError) {
            onError(data.error);
          }
        });
        
        await provider.initialize();
        
        if (isMounted) {
          setAuthProvider(provider);
        }
      } catch (err) {
        if (isMounted) {
          setError(err);
          setIsLoading(false);
          if (onError) {
            onError(err);
          }
        }
      }
    };

    initAuth();
    
    return () => {
      isMounted = false;
    };
  }, [providerType, providerConfig, onLogin, onLogout, onError]);

  /**
   * Initiates login with redirect
   * @param {Object} options - Login options
   */
  const login = useCallback(async (options) => {
    if (!authProvider) {
      throw new Error('Auth provider not initialized');
    }
    
    setIsLoading(true);
    try {
      await authProvider.login(options);
    } catch (err) {
      setError(err);
      setIsLoading(false);
      throw err;
    }
  }, [authProvider]);

  /**
   * Initiates login with popup
   * @param {Object} options - Login options
   * @returns {Promise<Object>} User profile
   */
  const loginWithPopup = useCallback(async (options) => {
    if (!authProvider) {
      throw new Error('Auth provider not initialized');
    }
    
    setIsLoading(true);
    try {
      const user = await authProvider.loginWithPopup(options);
      setIsLoading(false);
      return user;
    } catch (err) {
      setError(err);
      setIsLoading(false);
      throw err;
    }
  }, [authProvider]);

  /**
   * Logs out the current user
   * @param {Object} options - Logout options
   */
  const logout = useCallback(async (options) => {
    if (!authProvider) {
      throw new Error('Auth provider not initialized');
    }
    
    try {
      await authProvider.logout(options);
    } catch (err) {
      setError(err);
      throw err;
    }
  }, [authProvider]);

  /**
   * Gets the access token
   * @returns {Promise<string>} Access token
   */
  const getAccessToken = useCallback(async () => {
    if (!authProvider) {
      throw new Error('Auth provider not initialized');
    }
    
    try {
      return await authProvider.getAccessToken();
    } catch (err) {
      setError(err);
      throw err;
    }
  }, [authProvider]);

  const contextValue = {
    isAuthenticated,
    isLoading,
    user,
    error,
    login,
    loginWithPopup,
    logout,
    getAccessToken
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};

/**
 * Hook to use authentication context
 * @returns {Object} Authentication context
 */
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthContextProvider');
  }
  return context;
};

/**
 * Higher-Order Component to wrap components with authentication
 * @param {React.Component} Component - Component to wrap
 * @param {Object} options - HOC options
 * @param {React.ReactNode} [options.LoadingComponent] - Custom loading component
 * @param {React.ReactNode} [options.UnauthenticatedComponent] - Custom component for unauthenticated state
 * @returns {React.Component} Wrapped component
 */
export const withAuth = (Component, options = {}) => {
  const WithAuth = (props) => {
    const auth = useAuth();
    const { 
      LoadingComponent = () => <div>Loading...</div>,
      UnauthenticatedComponent = () => <div>Please log in to view this page</div>
    } = options;
    
    if (auth.isLoading) {
      return <LoadingComponent />;
    }
    
    if (!auth.isAuthenticated) {
      return <UnauthenticatedComponent />;
    }
    
    return <Component {...props} auth={auth} />;
  };
  
  WithAuth.displayName = `WithAuth(${Component.displayName || Component.name || 'Component'})`;
  
  return WithAuth;
};
