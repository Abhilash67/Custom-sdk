// App.jsx
import { useState, useEffect } from 'react';

const AUTH0_DOMAIN = 'dev-vfzstbs1dxkuagab.us.auth0.com';
const OKTA_DOMAIN = 'your-okta-domain.okta.com';
const CLIENT_ID = '7jEmLTXy7WvF5gAs1OE9QXIZhQnKfs5R';
const REDIRECT_URI = 'http://localhost:3000';

// ✳️ Whitelist for Auth0
const AUTH0_USERS = ['abhilash.gontia@yahoo.com', 'bob', 'charlie'];

const App = () => {
  const [username, setUsername] = useState('');
  const [loading, setLoading] = useState(false);
  const [debugInfo, setDebugInfo] = useState('');
  const [authResult, setAuthResult] = useState(null);

  // Check for Auth0 callback parameters
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get('code');
    const error = urlParams.get('error');
    const errorDescription = urlParams.get('error_description');

    if (code) {
      setAuthResult({ success: true, code, message: 'Auth0 login successful!' });
      window.history.replaceState({}, document.title, window.location.pathname);
    } else if (error) {
      setAuthResult({ 
        success: false, 
        error, 
        message: `Auth0 error: ${errorDescription || error}` 
      });
      window.history.replaceState({}, document.title, window.location.pathname);
    }
  }, []);

  const handleRedirect = (e) => {
    e.preventDefault();
    
    if (!username.trim()) {
      setDebugInfo('❌ Username is empty');
      return;
    }

    setLoading(true);
    setDebugInfo('');
    setAuthResult(null);
    
    const uname = username.trim().toLowerCase();
    setDebugInfo(`🔍 Checking username: "${uname}"`);

    const isAuth0User = AUTH0_USERS.includes(uname);
    
    if (isAuth0User) {
      setDebugInfo(`✅ User "${uname}" found in Auth0 whitelist`);
      
      // Build Auth0 URL
      const auth0Url = `https://${AUTH0_DOMAIN}/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(
        REDIRECT_URI
      )}&scope=openid profile email&login_hint=${encodeURIComponent(uname)}`;
      
      setDebugInfo(`🔗 Auth0 URL: ${auth0Url}`);
      
      // Add a small delay to see the debug info
      setTimeout(() => {
        console.log('🚀 Redirecting to Auth0:', auth0Url);
        window.location.href = auth0Url;
      }, 1000);
      
    } else {
      setDebugInfo(`❌ User "${uname}" NOT in Auth0 whitelist, redirecting to Okta`);
      
      const oktaUrl = `https://${OKTA_DOMAIN}/login/login.htm?login_hint=${encodeURIComponent(uname)}`;
      setDebugInfo(`🔗 Okta URL: ${oktaUrl}`);
      
      setTimeout(() => {
        console.log('🚀 Redirecting to Okta:', oktaUrl);
        window.location.href = oktaUrl;
      }, 1000);
    }
  };

  const testDirectRedirect = () => {
    const testUrl = `https://${AUTH0_DOMAIN}/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(
      REDIRECT_URI
    )}&scope=openid profile email`;
    
    console.log('🧪 Testing direct redirect:', testUrl);
    window.location.href = testUrl;
  };

  const clearResults = () => {
    setAuthResult(null);
    setDebugInfo('');
    setUsername('');
    setLoading(false);
  };

  return (
    <div className="p-4 max-w-lg mx-auto mt-10 shadow-xl rounded-xl border bg-white">
      <h1 className="text-2xl font-bold mb-4 text-center text-gray-800">Single Sign-On Portal</h1>
      
      {/* Auth Result */}
      {authResult && (
        <div className={`mb-4 p-3 rounded-lg ${
          authResult.success 
            ? 'bg-green-50 border border-green-200 text-green-700' 
            : 'bg-red-50 border border-red-200 text-red-700'
        }`}>
          <div className="flex justify-between items-start">
            <div>
              <p className="font-medium">{authResult.message}</p>
              {authResult.code && <p className="text-xs mt-1">Code: {authResult.code.substring(0, 20)}...</p>}
            </div>
            <button onClick={clearResults} className="text-gray-400 hover:text-gray-600">×</button>
          </div>
        </div>
      )}

      {/* Debug Info */}
      {debugInfo && (
        <div className="mb-4 p-3 bg-blue-50 border border-blue-200 text-blue-700 rounded-lg">
          <p className="text-sm font-mono">{debugInfo}</p>
        </div>
      )}
      
      <form onSubmit={handleRedirect}>
        <input
          type="text"
          className="border border-gray-300 p-3 w-full mb-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="Enter your username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          required
          disabled={loading}
        />
        <button
          type="submit"
          className="bg-blue-600 text-white py-3 px-4 w-full rounded-lg hover:bg-blue-700 disabled:bg-blue-300 transition-colors mb-2"
          disabled={loading || !username.trim()}
        >
          {loading ? 'Processing...' : 'Continue'}
        </button>
      </form>

      {/* Test Button */}
      <button
        onClick={testDirectRedirect}
        className="bg-gray-500 text-white py-2 px-4 w-full rounded-lg hover:bg-gray-600 text-sm mb-4"
      >
        🧪 Test Direct Auth0 Redirect (No Username Check)
      </button>
      
      <div className="text-xs text-gray-500 space-y-1">
        <p><strong>Auth0 Whitelist:</strong> {AUTH0_USERS.join(', ')}</p>
        <p><strong>Client ID:</strong> {CLIENT_ID}</p>
        <p><strong>Redirect URI:</strong> {REDIRECT_URI}</p>
        <p><strong>Auth0 Domain:</strong> {AUTH0_DOMAIN}</p>
      </div>

      {/* Instructions */}
      <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
        <p className="text-sm text-yellow-800">
          <strong>Debug Steps:</strong><br/>
          1. Try entering "abhilash.gontia@yahoo.com"<br/>
          2. Watch the debug messages<br/>
          3. Try the "Test Direct Redirect" button<br/>
          4. Check browser console for errors
        </p>
      </div>
    </div>
  );
};

export default App;
